#!/bin/bash

# """
# development.sh
# Builds the Docker images for local development and testing.
# Run & test the images using the provided menu.
# """

# read environment variables from .env file
set -a
# shellcheck disable=SC1091
source .env
set +a


DEVELOPMENT_ENVIRONMENT_STACKS_DIR="development/stacks"

# Menu options
options=(
    "Run SeaweedFS with local S3 Storage"
    "Build image - PCaster - podcast rankings scraper" 
    "Build image - Enricher - podcast metadata enricher"
    "Build image - Whisperer - scalable audio transcriber"
    "Build image - Spark NLP - natural language processing"
    "Run PCaster with local S3 - Pipeline Stage 1 (Ingest) - Apple Podcasts, Apple Platform, US Region"
    "Run PCaster with local S3 - Pipeline Stage 1 (Ingest) - Full Range"
    "Run Enricher with local S3 - Pipeline Stage 2 (Process) - Enrich metadata for podcasts & generate batch_job.json for Whisperer"
    "Run Whisperer cluster with local S3 baked in and Azure defined connection - Pipeline Stage 3 (Process) - listening for job submissions"
    "Run Whisperer Batch Job - Pipeline Stage 4 (Process) - run Whisperer batch job generated by Enricher"
    "Run Spark NLP with local S3 - Pipeline Stage 5 (Process) - run Spark NLP job"
    "Exit"
)

# Selected option index
selected=0

# Function to display the menu
draw_menu() {
    clear
    echo "Docker Image Builder & Runner"
    echo "------------------------------------------------------------"
    echo "Select an option:"
    echo "------------------------------------------------------------"
    for i in "${!options[@]}"; do
        if [[ $i -eq $selected ]]; then
            echo -e "> \e[1;32m${options[i]}\e[0m"
        else
            echo "  ${options[i]}"
        fi
    done
    echo "------------------------------------------------------------"
    echo " - Use ↑ ↓ arrows to navigate, Enter to select.             "
    echo "------------------------------------------------------------"
    echo "Current selection: ${options[selected]}"
}

# Capture arrow keys and enter
while true; do
    draw_menu

    IFS= read -rsn1 key
    if [[ $key == $'\x1b' ]]; then
        read -rsn2 -t 0.001 key
        case $key in
            "[A") ((selected--));;  # Up
            "[B") ((selected++));;  # Down
        esac
    elif [[ $key == "" ]]; then
        case $selected in
            0)
                echo "Running SeaweedFS with local S3 Storage..."
                (
                    cd $DEVELOPMENT_ENVIRONMENT_STACKS_DIR/seaweedfs || exit
                    docker-compose -f docker-compose.yml up -d
                )
                ;;
            1)
                echo "Building PCaster image..."
                docker build -t violetvi/pcaster:1.0.0 -f docker/Dockerfile.ingest.pcaster .
                if [[ $? -ne 0 ]]; then
                    echo "Failed to build PCaster image. Please check the Dockerfile and try again."
                    read -rp "Press any key to return to menu..." -n1
                    continue
                fi
                echo "PCaster image built successfully."
                echo "Checking size of the PCaster image..."
                docker image inspect violetvi/pcaster:1.0.0 --format='{{.Size}}' | numfmt --to=iec
                ;;
            2)
                echo "Building Enricher image..."
                docker build -t violetvi/enricher:1.0.0 -f docker/Dockerfile.process.enricher .
                if [[ $? -ne 0 ]]; then
                    echo "Failed to build Enricher image. Please check the Dockerfile and try again."
                    read -rp "Press any key to return to menu..." -n1
                    continue
                fi
                echo "Enricher image built successfully."
                echo "Checking size of the Enricher image..."
                docker image inspect violetvi/enricher:1.0.0 --format='{{.Size}}' | numfmt --to=iec
                ;;
            3)
                echo "Building Whisperer image..."
                docker build -t violetvi/whisperer:1.0.0 -f docker/Dockerfile.process.whisperer .
                if [[ $? -ne 0 ]]; then
                    echo "Failed to build Whisperer image. Please check the Dockerfile and try again."
                    read -rp "Press any key to return to menu..." -n1
                    continue
                fi
                echo "Building Whisperer Broker image..."
                docker build -t violetvi/whisperer-broker:1.0.0 -f docker/Dockerfile.process.broker .
                if [[ $? -ne 0 ]]; then
                    echo "Failed to build Whisperer Broker image. Please check the Dockerfile and try again."
                    read -rp "Press any key to return to menu..." -n1
                    continue
                fi
                echo "Whisperer and Whisperer Broker images built successfully."
                echo "Checking size of the Whisperer image..."
                docker image inspect violetvi/whisperer:1.0.0 --format='{{.Size}}' | numfmt --to=iec
                echo "Checking size of the Whisperer Broker image..."
                docker image inspect violetvi/whisperer-broker:1.0.0 --format='{{.Size}}' | numfmt --to=iec
                echo "You can now run the Whisperer cluster using the 'Run Whisperer cluster' option."
                ;;
            4)
                echo "Building Spark NLP image..."
                docker build -t violetvi/spark-nlp:1.0.0 -f docker/Dockerfile.process.spark_nlp .
                if [[ $? -ne 0 ]]; then
                    echo "Failed to build Spark NLP image. Please check the Dockerfile and try again."
                    read -rp "Press any key to return to menu..." -n1
                    continue
                fi
                echo "Spark NLP image built successfully."
                echo "Checking size of the Spark NLP image..."
                docker image inspect violetvi/spark-nlp:1.0.0 --format='{{.Size}}' | numfmt --to=iec
                ;;
            5)
                echo "Checking if image 'violetvi/pcaster:1.0.0' exists..."
                if docker image inspect violetvi/pcaster:1.0.0 > /dev/null 2>&1; then
                    echo "Image found. Running PCaster with local S3..."
                    echo "Following command will scrape Apple Podcasts rankings for the US region."
                    echo "Results will be stored in the local SeaweedFS S3 storage visible at http://localhost:8899/buckets/whisperer/"
                    docker run -e S3_SECRET_KEY=your_secret_key \
                            -e S3_ENDPOINT_URL=http://host.docker.internal:8333 \
                            -e S3_USE_SSL=False \
                            -e TZ=Europe/Warsaw \
                            violetvi/pcaster:1.0.0 pcaster \
                            --source apple_podcasts \
                            -p apple \
                            -c us \
                            --overwrite \
                            --s3-access-key your_access_key
                else
                    echo "Image not found. Please build it first."
                fi
                ;;
            6) 
                echo "PCaster scrape full range..."
                if docker image inspect violetvi/pcaster:1.0.0 > /dev/null 2>&1; then
                    echo "Image found. Running PCaster with local S3..."
                    echo "Following command will scrape all Podcasts rankings for all regions and platforms."
                    echo "Results will be stored in the local SeaweedFS S3 storage visible at http://localhost:8899/buckets/whisperer/"
                    docker run -e S3_SECRET_KEY=your_secret_key \
                            -e S3_ENDPOINT_URL=http://host.docker.internal:8333 \
                            -e S3_USE_SSL=False \
                            -e TZ=Europe/Warsaw \
                            violetvi/pcaster:1.0.0 pcaster \
                            --overwrite \
                            --s3-access-key your_access_key
                else
                    echo "Image not found. Please build it first."
                fi
                ;;
            7)
                # Check if the Enricher image exists before running
                echo "Checking if image 'violetvi/enricher:1.0.0' exists..."
                if docker image inspect violetvi/enricher:1.0.0 > /dev/null 2>&1; then
                    echo "Image found. Running Enricher with local S3..."
                    echo "Following command will enrich metadata for podcasts and generate batch_job.json for Whisperer."
                    echo "Results will be stored in the local SeaweedFS S3 storage visible at http://localhost:8899/buckets/whisperer/"
                    docker run -e S3_SECRET_KEY=your_secret_key \
                            -e S3_ENDPOINT_URL=http://host.docker.internal:8333 \
                            -e S3_USE_SSL=False \
                            -e TZ=Europe/Warsaw \
                            -e PODCAST_INDEX_API_KEY="${PODCASTING_INDEX_API_KEY:-your_api_key}" \
                            -e PODCAST_INDEX_API_SECRET="${PODCASTING_INDEX_API_SECRET:-your_api_secret}" \
                            violetvi/enricher:1.0.0 enricher \
                            --s3-access-key your_access_key \
                            --verbose \
                            --overwrite \
                            --target-storage-name seaweedfs \
                            --target-protocol s3 \
                            --countries "us"

                else
                    echo "Image not found. Please build it first."
                fi
                ;;
            8)
                echo "Running Whisperer cluster..."
                (
                    cd $DEVELOPMENT_ENVIRONMENT_STACKS_DIR/whisperer || exit
                    docker-compose -f docker-compose.yml up -d
                )
                ;;
            9)
                echo "Running Whisperer Batch Job..."
                echo "This will run the Whisperer batch job generated by Enricher."
                echo "Make sure the Whisperer cluster is running first."
                docker exec whisperer-submitter whisperer-submit --batch seaweedfs+s3://whisperer/batch_job.json
                ;;
            10)
                echo "Running Spark NLP job..."
                echo "This will run the Spark NLP job using the local S3 storage."
                echo "Make sure the Spark NLP image is built first."
                docker-compose up
                ;;
            11)
                echo "Exiting..."
                exit 0
                ;;
        esac
        read -rp "Press any key to return to menu..." -n1
    fi

    # Wrap around
    ((selected < 0)) && selected=$((${#options[@]} - 1))
    ((selected >= ${#options[@]})) && selected=0
done

