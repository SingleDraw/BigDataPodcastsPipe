name: Deploy to Azure Container Apps

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  AZURE_RESOURCE_GROUP: 'rg-bigdata-podcasts'
  AZURE_LOCATION: 'eastus'
  ACR_NAME: 'acrbigdatapodcasts'
  ACA_ENV_NAME: 'env-job-processing'

jobs:
  build-and-deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Log in to Azure Container Registry
      run: |
        az acr login --name ${{ env.ACR_NAME }}

    - name: Build and push Docker images
      run: |
        # Build submitter image
        docker build -t ${{ env.ACR_NAME }}.azurecr.io/job-submitter:${{ github.sha }} ./submitter
        docker build -t ${{ env.ACR_NAME }}.azurecr.io/job-submitter:latest ./submitter
        
        # Build worker image  
        docker build -t ${{ env.ACR_NAME }}.azurecr.io/job-worker:${{ github.sha }} ./worker
        docker build -t ${{ env.ACR_NAME }}.azurecr.io/job-worker:latest ./worker
        
        # Push images
        docker push ${{ env.ACR_NAME }}.azurecr.io/job-submitter:${{ github.sha }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/job-submitter:latest
        docker push ${{ env.ACR_NAME }}.azurecr.io/job-worker:${{ github.sha }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/job-worker:latest

    - name: Create/Update Container Apps Environment
      run: |
        # Check if environment exists
        if ! az containerapp env show --name ${{ env.ACA_ENV_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} &>/dev/null; then
          echo "Creating Container Apps Environment..."
          az containerapp env create \
            --name ${{ env.ACA_ENV_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }}
        else
          echo "Container Apps Environment already exists"
        fi

    - name: Setup Redis Cache
      run: |
        # Create Redis if it doesn't exist
        REDIS_NAME="redis-job-broker"
        if ! az redis show --name $REDIS_NAME --resource-group ${{ env.AZURE_RESOURCE_GROUP }} &>/dev/null; then
          echo "Creating Redis Cache..."
          az redis create \
            --name $REDIS_NAME \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }} \
            --sku Basic \
            --vm-size c0
          
          # Wait for Redis to be ready
          echo "Waiting for Redis to be ready..."
          az redis wait --name $REDIS_NAME --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --created
        fi
        
        # Get Redis connection details
        REDIS_KEY=$(az redis list-keys --name $REDIS_NAME --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query primaryKey -o tsv)
        REDIS_HOST=$(az redis show --name $REDIS_NAME --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query hostName -o tsv)
        REDIS_CONNECTION="$REDIS_HOST:6380,password=$REDIS_KEY,ssl=True"
        
        echo "REDIS_CONNECTION=$REDIS_CONNECTION" >> $GITHUB_ENV

    - name: Deploy Worker App
      run: |
        # Check if worker app exists and update/create accordingly
        if az containerapp show --name job-worker --resource-group ${{ env.AZURE_RESOURCE_GROUP }} &>/dev/null; then
          echo "Updating existing worker app..."
          az containerapp update \
            --name job-worker \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --image ${{ env.ACR_NAME }}.azurecr.io/job-worker:${{ github.sha }}
        else
          echo "Creating new worker app..."
          az containerapp create \
            --name job-worker \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --environment ${{ env.ACA_ENV_NAME }} \
            --image ${{ env.ACR_NAME }}.azurecr.io/job-worker:${{ github.sha }} \
            --secrets "redis-connection=${{ env.REDIS_CONNECTION }}" \
            --env-vars "REDIS_URL=secretref:redis-connection" \
            --min-replicas 0 \
            --max-replicas 10 \
            --cpu 0.5 \
            --memory 1Gi \
            --registry-server ${{ env.ACR_NAME }}.azurecr.io \
            --registry-identity system
        fi

    - name: Deploy Job Submitter
      run: |
        # Check if job exists and update/create accordingly  
        if az containerapp job show --name job-submitter --resource-group ${{ env.AZURE_RESOURCE_GROUP }} &>/dev/null; then
          echo "Updating existing job submitter..."
          az containerapp job update \
            --name job-submitter \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --image ${{ env.ACR_NAME }}.azurecr.io/job-submitter:${{ github.sha }}
        else
          echo "Creating new job submitter..."
          az containerapp job create \
            --name job-submitter \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --environment ${{ env.ACA_ENV_NAME }} \
            --image ${{ env.ACR_NAME }}.azurecr.io/job-submitter:${{ github.sha }} \
            --secrets "redis-connection=${{ env.REDIS_CONNECTION }}" "storage-key=${{ secrets.AZURE_STORAGE_KEY }}" \
            --env-vars "REDIS_URL=secretref:redis-connection" "STORAGE_KEY=secretref:storage-key" \
            --cpu 0.5 \
            --memory 1Gi \
            --parallelism 1 \
            --completion-count 1 \
            --restart-policy Never \
            --registry-server ${{ env.ACR_NAME }}.azurecr.io \
            --registry-identity system
        fi

    - name: Output deployment info
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo ""
        echo "üìä Container Apps Environment: ${{ env.ACA_ENV_NAME }}"
        echo "üê≥ Worker App: job-worker"
        echo "‚ö° Job Submitter: job-submitter"
        echo "üî¥ Redis: redis-job-broker"
        echo ""
        echo "üöÄ To trigger job from ADF, use:"
        echo "POST https://management.azure.com/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.App/jobs/job-submitter/start?api-version=2023-05-01"