name: Deploy ADF Pipeline and Trigger Test

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  # Subscription and resource group details for URL build in template hydration
  SUBSCRIPTION_ID: ${{ secrets.TF_VAR_SUBSCRIPTION_ID }}
  RESOURCE_GROUP: ${{ secrets.TF_VAR_RESOURCE_GROUP_NAME }}

  # pipeline WebActivity 
  # - url build hydration, 
  # - body properties container name for ACI
  ACI_NAME: ephemeral-job-test
  # pipeline WebActivity body block variables hydration for ACI
  LOCATION: westeurope
  # pipline WebActivity body block UAMI hydration for ACI
  UAMI_NAME: aci-uami 
  # pipeline WebActivity body block container image name hydration for ACI
  IMAGE_NAME: test-app-image
  IMAGE_TAG: latest

  # ACR credentials for pipeline template hydration
  ACR_NAME: ${{ secrets.TF_VAR_CONTAINER_REGISTRY_NAME }}
  ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
  ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}

  # KEY VAULT for building vault URL passed as ENV var to ACI
  KEY_VAULT_NAME: ${{ secrets.KEY_VAULT_NAME }}
  # For Storage access passed as ENV var to ACI
  STORAGE_ACCOUNT_NAME: ${{ secrets.TF_VAR_STORAGE_ACCOUNT_NAME }}
  # SPECIFIC ENV TO APP INTERNAL USE
  SECRET_NAME_TO_DISPLAY: "blob-storage-connection-string"

  # For Trigger hydration
  ADF_PIPELINE_NAME: RunTestACI

  # For this workflow script only
  TRIGGER_NAME: DailyTriggerTest
  ADF_NAME: ${{ secrets.TF_VAR_RESOURCE_GROUP_NAME }}-adf


  # STORAGE_ACCOUNT_KEY: ${{ secrets.STORAGE_ACCOUNT_KEY }}
  # IDENTITY_RESOURCE_ID: ${{ secrets.IDENTITY_RESOURCE_ID }} # For container identity
  # IDENTITY_CLIENT_ID: ${{ secrets.IDENTITY_CLIENT_ID }}     # For ADF authentication
  # ADF_LINKED_SERVICE_NAME: AzureManagementLSTest

  

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # - name: Azure Login
    #   uses: azure/login@v1
    #   with:
    #     creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Azure Login via OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}


    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    # - name: Set environment variables for container - not secure, for testing only
    #   run: |
    #     echo "AZURE_CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientId)" >> $GITHUB_ENV
    #     echo "AZURE_TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .tenantId)" >> $GITHUB_ENV
    #     echo "AZURE_CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientSecret)" >> $GITHUB_ENV

    - name: Generate pipeline JSON with env vars and create trigger JSON
      run: |
          echo "Generating pipeline.json and trigger.json with environment variables..."
          export NOW=$(date -u -d "+1 minute" +"%Y-%m-%dT%H:%M:%SZ")
          echo "Trigger time set to: $NOW"

          cat infra/adf-pipelines/RunTestACI.template.json | envsubst > pipeline.json
          cat infra/adf-triggers/DailyTriggerTest.template.json | envsubst > trigger.json

          # Uncomment below to debug generated JSON files
          # echo "Generated trigger.json:"
          # cat trigger.json

    - name: Disable and delete ADF trigger if it exists
      run: |
        if az datafactory trigger show --factory-name "$ADF_NAME" --resource-group "$RESOURCE_GROUP" --name "$TRIGGER_NAME" > /dev/null 2>&1; then
          echo "Disabling existing trigger..."
          az datafactory trigger stop --factory-name "$ADF_NAME" --resource-group "$RESOURCE_GROUP" --name "$TRIGGER_NAME"
          echo "Deleting existing trigger..."
          az datafactory trigger delete --factory-name "$ADF_NAME" --resource-group "$RESOURCE_GROUP" --name "$TRIGGER_NAME" --yes
        else
          echo "Trigger does not exist, skipping disable step."
        fi

    - name: Remove existing pipeline if it exists
      run: |
        if az datafactory pipeline show --factory-name "$ADF_NAME" --resource-group "$RESOURCE_GROUP" --name "$ADF_PIPELINE_NAME" > /dev/null 2>&1; then
          echo "Removing existing pipeline..."
          az datafactory pipeline delete --factory-name "$ADF_NAME" --resource-group "$RESOURCE_GROUP" --name "$ADF_PIPELINE_NAME" --yes
        else
          echo "Pipeline does not exist, skipping removal step."
        fi

    - name: Remove existing ACI group if it exists
      run: |
        if az container show --name "$ACI_NAME" --resource-group "$RESOURCE_GROUP" > /dev/null 2>&1; then
          echo "Removing existing ACI group..."
          az container delete --name "$ACI_NAME" --resource-group "$RESOURCE_GROUP" --yes
        else
          echo "ACI group does not exist, skipping removal step."
        fi

    - name: Deploy pipeline to ADF
      run: |
        az datafactory pipeline create \
          --factory-name $ADF_NAME \
          --resource-group $RESOURCE_GROUP \
          --name $ADF_PIPELINE_NAME \
          --pipeline @pipeline.json

    - name: Deploy ADF trigger
      run: |
        az datafactory trigger create \
          --factory-name "$ADF_NAME" \
          --resource-group "$RESOURCE_GROUP" \
          --name "$TRIGGER_NAME" \
          --properties @"trigger.json"
        
    - name: Start trigger
      run: |
        az datafactory trigger start \
          --factory-name "$ADF_NAME" \
          --resource-group "$RESOURCE_GROUP" \
          --name "$TRIGGER_NAME"


