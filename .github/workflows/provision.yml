name: Provision Azure Infra

on:
  workflow_dispatch:
  workflow_run:                 # Trigger after Bootstrap workflow completes
    workflows: ["Bootstrap"]    # Name of the workflow to wait for
    types:
      - completed

permissions:
  id-token: write
  contents: read

env:
    TF_LOG: DEBUG
    TF_VAR_github_token: ${{ secrets.GH_PAT_TOKEN }}
    TF_VAR_github_owner: ${{ github.repository_owner }}
    TF_VAR_github_repository: ${{ github.event.repository.name }}
    TF_VAR_resource_group_name: ${{ secrets.TF_VAR_RESOURCE_GROUP_NAME }} 
    TF_VAR_container_registry_name: ${{ secrets.TF_VAR_CONTAINER_REGISTRY_NAME }}
    TF_VAR_location: ${{ secrets.TF_VAR_LOCATION }}                       
    TF_VAR_storage_account_name: ${{ secrets.TF_VAR_STORAGE_ACCOUNT_NAME }}
    TF_VAR_subscription_id: ${{ secrets.TF_VAR_SUBSCRIPTION_ID }}
    # TF_VAR_container_group_name: ${{ secrets.TF_VAR_CONTAINER_GROUP_NAME }}
    # Secrets for Podcast Index API
    TF_VAR_podcasting_index_api_key: ${{ secrets.PODCASTING_INDEX_API_KEY }}
    TF_VAR_podcasting_index_api_secret: ${{ secrets.PODCASTING_INDEX_API_SECRET }}
    TF_VAR_brick_pcaster_image_name: ${{ secrets.BRICK_PCASTER_IMAGE_NAME }}
    #
    TF_VAR_azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
    TF_VAR_azure_object_id: ${{ secrets.AZURE_OBJECT_ID }}  # If using this approach
    TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
    # Azure Function Aci-Logs Uploader
    TF_VAR_function_key: ${{ secrets.TF_VAR_FUNCTION_KEY }}

jobs:
  terraform:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3

    # - name: Azure Login
    #   uses: azure/login@v1
    #   with:
    #     creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Debug OIDC Token
      run: |
        echo "GITHUB_TOKEN exists: ${{ secrets.GITHUB_TOKEN != '' }}"
        echo "Repository: ${{ github.repository }}"
        echo "Ref: ${{ github.ref }}"
        echo "Actor: ${{ github.actor }}"

    - name: Azure Login via OIDC
      uses: azure/login@v2 # Use v2 for OIDC support
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Init main Terraform with remote backend
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_VAR_RESOURCE_GROUP_NAME }}" \
          -backend-config="storage_account_name=${{ secrets.TF_VAR_STORAGE_ACCOUNT_NAME }}" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=terraform.tfstate"
      working-directory: infra/main

    - name: Make script executable
      run: chmod +x ../scripts/import.sh
      working-directory: infra/main

    - name: Run conditional import script
      run: ../scripts/import.sh
      working-directory: infra/main
      shell: bash

    # - name: Terraform Plan
    #   run: terraform plan
    #   working-directory: infra/main

    # - name: Terraform Apply
    #   run: terraform apply -auto-approve
    #   working-directory: infra/main


    - name: 'Terraform Plan - Access Policies First'
      run: terraform plan -target=azurerm_key_vault_access_policy.github_actions
      working-directory: infra/main
    
    - name: 'Terraform Apply - Access Policies First'
      run: terraform apply -target=azurerm_key_vault_access_policy.github_actions -auto-approve
      working-directory: infra/main
    
    - name: 'Terraform Plan - Everything Else'
      run: terraform plan
      working-directory: infra/main
    
    - name: 'Terraform Apply - Everything Else'
      run: terraform apply -auto-approve
      working-directory: infra/main

    - name: Set infra ready flag
      run: |
        gh variable set INFRA_READY --env infra-ready --body "true"
      env:
        GH_TOKEN: ${{ env.TF_VAR_github_token }}


    - name: Zip Function App code
      run: |
        cd ./aci_logs_uploader
        zip -r ../function.zip .
        cd ..

    - name: Deploy to Azure Function App
      run: |
        az functionapp deployment source config-zip \
          --name ${{ secrets.FUNCTION_APP_NAME }} \
          --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
          --src function.zip
        
