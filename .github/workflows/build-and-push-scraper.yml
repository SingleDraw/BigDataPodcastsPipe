name: Build and Push Brick - Pcaster Scraper App Docker Image

on:
  push:       # Trigger when code is pushed to the repository
    branches:
      - main  # Only trigger on main branch
    paths:    # Only trigger when changes are made in the specified path
      - 'docker/ingest/brick-pcaster/**'

  workflow_dispatch:  # Manual trigger
    inputs:
      tagMode:
        description: 'Tag mode for the Docker image: latest or both (latest+sha)'
        required: false
        default: 'latest' 
        type: choice
        options:
          - latest
          - both # Allows both latest and sha tags


env:
  TF_LOG: DEBUG
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  REGISTRY_USERNAME: ${{ secrets.ACR_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.ACR_PASSWORD }}
  AZURE_RESOURCE_GROUP: ${{ secrets.TF_VAR_RESOURCE_GROUP_NAME }}
  IMAGE_NAME_SCRAPER: ${{ secrets.BRICK_PCASTER_IMAGE_NAME }}
  APP_REPO_PATH: ./docker/ingest/brick-pcaster
  APP_NAME_SCRAPER: brick-pcaster-app

jobs:
  check-infra:
    runs-on: ubuntu-latest
    environment: infra-ready  # this is required to access environment-scoped variables
    steps:
      - name: Fail if infra not ready
        run: |
          if [[ "${{ vars.INFRA_READY }}" != "true" ]]; then
            echo "Infrastructure is not ready. Please run the bootstrap workflow first."
            exit 1
          fi

  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.tagMode }}" == "latest" ]]; then
              echo 'matrix=[{"tag":"latest"}]' >> $GITHUB_OUTPUT
            else
              echo 'matrix=[{"tag":"latest"},{"tag":"sha"}]' >> $GITHUB_OUTPUT
            fi
          else
            # Default to both latest and sha tags if not triggered manually
            # echo 'matrix=[{"tag":"latest"},{"tag":"sha"}]' >> $GITHUB_OUTPUT

            # Default to latest if not specified
            echo 'matrix=[{"tag":"latest"},{"tag":"sha"}]' >> $GITHUB_OUTPUT
          fi

  build-and-push:
    runs-on: ubuntu-latest
    needs: [check-infra, setup-matrix]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4


    - name: Login to Azure Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ env.REGISTRY_USERNAME }}
        password: ${{ env.REGISTRY_PASSWORD }}

    - name: Check ACR access
      run: |
        echo "Pinging ACR: $REGISTRY"
        echo "$REGISTRY_PASSWORD" | docker login "$REGISTRY" -u "$REGISTRY_USERNAME" --password-stdin || {
          echo "❌ Failed to authenticate with ACR. Aborting build."
          exit 1
        }
        echo "✅ ACR login successful."

    - name: Build and push Docker image
      if: matrix.tagMode == 'both'
      uses: docker/build-push-action@v4
      with:
        context: ${{ env.APP_REPO_PATH }}
        file: ${{ env.APP_REPO_PATH }}/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_SCRAPER }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_SCRAPER }}:${{ github.sha }}


    - name: Build and push Docker image
      if: matrix.tagMode == 'latest'
      uses: docker/build-push-action@v4
      with:
        context: ${{ env.APP_REPO_PATH }}
        file: ${{ env.APP_REPO_PATH }}/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_SCRAPER }}:latest


  # DONT DEPLOY TO ACA, IT WILL BE DEPLOYED BY THE ADF PIPELINE AS ACI JOB

  # deploy-app:
  #   name: 'Deploy Application'
  #   runs-on: ubuntu-latest
  #   # needs: [terraform, build-and-push]
  #   needs: [build-and-push]
  #   # if: github.ref == 'refs/heads/main'
            
  #   steps:
  #     - name: Login to Azure
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}
        
  #     - name: Deploy to Azure Container Apps
  #       run: |
  #         az containerapp update \
  #           --name "${{ env.APP_NAME_SCRAPER }}" \
  #           --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" \
  #           --image "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_SCRAPER }}:${{ github.sha }}"