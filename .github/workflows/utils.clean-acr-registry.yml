name: Clean Azure Container Registry

# This workflow cleans up the Azure Container Registry 
# by leaving only the most recent image per repo and removing the rest.
# It is designed to be run manually or automatically after building and pushing Docker images.
# It requires the infrastructure to be set up first, so it checks the INFRA_READY variable.

on:
  # Manual trigger
  workflow_dispatch: 
  # on end of certain workflows
  # workflow_run:
  #   workflows: 
  #     - "Build and Push Brick Pcaster Docker Image"
  #     - "Build and Push Brick Whisperer Docker Image"
  #     - "Build and Push Test App Docker Image"
  #   types:
  #     - completed


env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  REGISTRY_USERNAME: ${{ secrets.ACR_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.ACR_PASSWORD }}
  AZURE_RESOURCE_GROUP: ${{ secrets.TF_VAR_RESOURCE_GROUP_NAME }}
  ACR_NAME: ${{ secrets.TF_VAR_CONTAINER_REGISTRY_NAME }}

jobs:
  check-infra:
    runs-on: ubuntu-latest
    environment: infra-ready  # this is required to access environment-scoped variables
    steps:
      - name: Fail if infra not ready
        run: |
          if [[ "${{ vars.INFRA_READY }}" != "true" ]]; then
            echo "Infrastructure is not ready. Please run the bootstrap workflow first."
            exit 1
          fi

  clean-registry:
    runs-on: ubuntu-latest
    permissions:
        id-token: write
        contents: read
    needs: [check-infra]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login via OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: List ACR images before cleanup
      run: |
        echo "Images before cleanup:"
        for IMAGE in $(az acr repository list --name $ACR_NAME --output tsv); do
          echo "üîπ $IMAGE"
          az acr repository show-tags --name $ACR_NAME --repository $IMAGE --output tsv | sed "s/^/    - /"
        done

    - name: Clean Azure Container Registry from custom tagged images
      # disable this step
      if: false
      run: |
        echo "Cleaning up Azure Container Registry: $ACR_NAME"
        # List all images with custom tags
        IMAGES=$(az acr repository list --name $ACR_NAME --output tsv)
        if [ -z "$IMAGES" ]; then
          echo "No images found in ACR."
          exit 0
        fi

        for IMAGE in $IMAGES; do
          echo "Processing image: $IMAGE"

          # List tags for the image
          TAGS=$(az acr repository show-tags --name $ACR_NAME --repository $IMAGE --output tsv)
          for TAG in $TAGS; do
            if [[ "$TAG" != "latest" && "$TAG" != "stable" ]]; then
              echo "Deleting image: $IMAGE:$TAG"
              az acr repository delete --name $ACR_NAME --image "$IMAGE:$TAG" --yes || {
                echo "‚ùå Failed to delete image: $IMAGE:$TAG"
                exit 1
              }
            fi
          done
        done

        echo "‚úÖ Cleanup completed successfully."

    - name: Erase all except the most recent latest image
      if: false
      run: |
        # List all repositories (images)
        repos=$(az acr repository list --name "$ACR_NAME" -o tsv)

        for repo in $repos; do
            echo "Processing $repo"
            latest_digest=$(az acr repository show-manifests --name "$ACR_NAME" --repository "$repo" --query "[?tags[?@=='latest']].digest | [0]" -o tsv)
            echo "Keeping latest digest: $latest_digest"
            digests=$(az acr repository show-manifests --name "$ACR_NAME" --repository "$repo" --query "[].digest" -o tsv)
            for digest in $digests; do
                if [[ "$digest" != "$latest_digest" ]]; then
                    echo "Deleting $digest"
                    az acr repository delete --name "$ACR_NAME" --repository "$repo" --manifest "$digest" --yes
                fi
            done
        done
        echo "‚úÖ All except the most recent image have been erased."

    - name: Erase all except the most recent image
      # all have latest tag anyway, so we can just keep the most recent one
      run: |
        # List all repositories (images)
        repos=$(az acr repository list --name "$ACR_NAME" -o tsv)

        for repo in $repos; do
            echo "Processing image: $repo"

            # List all manifests (digests), sorted by last update time (desc)
            digests=$(az acr repository show-manifests \
                --name "$ACR_NAME" \
                --repository "$repo" \
                --orderby time_desc \
                --query "[].digest" -o tsv)

            # Get the first (most recent) digest
            keep_digest=$(echo "$digests" | head -n1)

            echo "Keeping digest: $keep_digest"

            # Delete all other digests
            to_delete=$(echo "$digests" | tail -n +2)

            for digest in $to_delete; do
                echo "Deleting digest: $digest"
                az acr repository delete \
                --name "$ACR_NAME" \
                --repository "$repo" \
                --manifest "$digest" \
                --yes
            done
        done
        echo "‚úÖ All except the most recent image have been erased."

    - name: List ACR images after cleanup
      run: |
        echo "Images after cleanup:"
        for IMAGE in $(az acr repository list --name $ACR_NAME --output tsv); do
          echo "üîπ $IMAGE"
          az acr repository show-tags --name $ACR_NAME --repository $IMAGE --output tsv | sed "s/^/    - /"
        done
  